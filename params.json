{"name":"EntityHooks","tagline":"Provides an extension points for EF DbContext in order to hook database operations.","body":"EntityFramework Hooks\r\n==============\r\n\r\nEntityHooks provides an extension points for EF Code First DbContext in order to hook database operations.\r\nIt is designed to be easy-to-use, unit-testable and IoC compatible.\r\n\r\n## How to use\r\n\r\nThere are few ways to hook into DbContext load/save operations: \r\n- using a DbContextHooker class passing your DbContext instance into constructor;\r\n- using fluent interface;\r\n- deriving your DbContext from DbHookContext class. That option allows you to attach post-save hooks.\r\n\r\n### Fluent interface\r\nReference *System.Data.Entity.Hooks.Fluent.dll* assembly and include namespace in order to use fluent hooking interface.\r\n```csharp\r\nusing System.Data.Entity.Hooks.Fluent;\r\n```\r\nLogging of loading *Order* entities from datatbase:\r\n```csharp\r\ndbContext.CreateHook()\r\n        .OnLoad<Order>()\r\n        .When(order => order.Status != 0)\r\n        .Do(order => _logger.Write(\"Loaded entity \" + order.Id));\r\n```\r\nSetting date *Order* entity was modified:\r\n```csharp\r\ndbContext.CreateHook()\r\n         .OnSave<Order>()\r\n         .When(EntityState.Added | EntityState.Modified)\r\n         .And(order => order.Status == 1)\r\n         .Do(order => order.ModifiedDate = DateTime.UtcNow);\r\n```\r\nDelete *Order* entity if either *CustomerId* or *CategoryId* is *NULL*:\r\n```csharp\r\ndbContext.CreateHook()\r\n         .OnSave<Order>()\r\n         .When(order => order.CustomerId == null || order.CategoryId == null)\r\n         .Do(order => dbContext.Set<Order>().Remove(order));\r\n```\r\nHowever, it is still possible to attach any *IDbHook* implementation through fluent interface:\r\n```csharp\r\ndbContext.OnLoad()\r\n         .Attach(new MyFancyHook())\r\n         .Attach(new CustomHook());\r\ndbContext.OnSave()\r\n         .Attach(new MyFancyHook());\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}